<?xml version="1.0"?>
<launch>
  <arg name="world_name" default="$(find gazebo_ros)/worlds/empty_world.world"/>
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />
  <arg name="rviz_config" default="$(find ur5erobotiq_moveit_config)/launch/moveit.rviz" />
  <!--ZZW 20230629-->
  <arg name="debug" default="false"/>
  <arg if="$(arg debug)" name="launch-prefix" value="screen -d -m gdb -command=$(env HOME)/.ros/my_debug_log --ex run --args"/>
        <arg unless="$(arg debug)" name="launch-prefix" value=""/>
   <!--zzw-->

  <!-- ADDED 20211216 specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- send robot urdf to param server -->
  <param name="robot_description" 
         command="$(find xacro)/xacro --inorder '$(find ur5erobotiq_moveit_config)/urdf/ur5e_robotiq_macro.xacro'
                   transmission_hw_interface:=$(arg transmission_hw_interface)" />

    <!-- GAZEBO arguments -->
    <arg name="paused" default="false" />
    <arg name="use_sim_time" default="true" />
    <arg name="gui" default="true" />
    <arg name="headless" default="false" />
    <!--arg name="debug" default="false" /-->

    <!--launch GAZEBO with own world configuration -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!--arg name="verbose" value="true" /-->    
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="debug" value="$(arg debug)" />
        <arg name="gui" value="$(arg gui)" />
        <arg name="paused" value="$(arg paused)" />
        <arg name="use_sim_time" value="$(arg use_sim_time)" />
        <arg name="headless" value="$(arg headless)" />
    </include>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model ur5 -x 0 -y 0 -z 0.6" />
    
    <!--ZZW 20230629 ADD TABLE-->
    <include file="$(find ur5_robotiq_85_simulation)/launch/ttable.launch"/> 
    
    <!--ZZW 20230629 FOR REMAP THE TARGET WRENCH-->
     <!--node name="sim_hardware_interface" pkg="ros_control_boilerplate" type="sim_hw_main" output="screen" launch-prefix="$(arg launch-prefix)">
     </node-->
     <!-- Control motion and compliance controller with one handle -->
     <!--remap from="my_motion_control_handle/target_frame" to="target_frame" /-->
     <remap from="arm_controller_handle/target_frame" to="target_frame" />
     <remap from="arm_controller_compliance/target_frame" to="target_frame" />
                <!-- Control wrenches via one topic -->
     <remap from="arm_controller_force/target_wrench" to="target_wrench" />
     <remap from="arm_controller_compliance/target_wrench" to="target_wrench" />
        

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="/home/walter/catkin_ws/src/ur5_robotiq_85_simulation/config/ur5_robotiq_85_control.yaml" command="load" />
     /home/walter/catkin_ws/src/ur5erobotiq_moveit_config/config/ros_controllers.yaml

    <!-- load the controllers -->
    <node name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="gripper_controller" />
    <node name="controller_spawner"      pkg="controller_manager" type="spawner" respawn="false" output="screen" args="arm_controller joint_state_controller" />
    


    <!--remap from="/head_mount_kinect/depth_registered/points" to="kinect_V2/depth_registered/points"/-->

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    
    <include file="$(find ur5erobotiq_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true" />
    </include>
    <include file="$(find ur5erobotiq_moveit_config)/launch/move_group.launch">
    </include>
    <group if="$(arg gui)">
        <include file="$(find ur5erobotiq_moveit_config)/launch/moveit_rviz.launch">
            <arg name="rviz_config" value="$(arg rviz_config)"/>
        </include>
    </group>

    <!--node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" /-->

    <!-- launch robot control node for moveit motion planning -->
    <node pkg="ur5_robotiq_85_simulation" type="robot_control_node" name="robot_control_node" output="screen" />

    <!-- load (not start!) custom joint position controller -->
    <node pkg="controller_manager" type="spawner" name="joint_position_launcher" args="--stopped joint_position_controller" />
    <node name="controller_spawner_stop" pkg="controller_manager" type="spawner" 
        args="--stopped
              arm_controller_force 
              arm_controller_compliance 
              arm_controller_handle"/>
</launch>
