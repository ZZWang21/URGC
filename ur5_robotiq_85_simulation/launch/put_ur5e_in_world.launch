<?xml version="1.0"?>
<launch>
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" />

  <!-- ADDED 20211216 specify the planning pipeline -->
  <arg name="pipeline" default="ompl" />

  <!-- send robot urdf to param server -->
  <param name="robot_description" 
         command="$(find xacro)/xacro --inorder '$(find ur5erobotiq_moveit_config)/urdf/ur5e_robotiq_macro.xacro'
                   transmission_hw_interface:=$(arg transmission_hw_interface)" />

    <arg name="gui" default="false"/>
    <!--arg name="gzweb" default="false"/-->
    <arg name="verbose" default="false"/>
    <arg name="start_gazebo" default="false"/>

    <group if="$(arg start_gazebo)">
    <include file="$(find gazebo_ros)/launch/empty_world.launch">launch empty world again, can be another world launch file.
        <arg name="world_name" value="/home/walter/.gazebo/worlds/ur5e_ball.world"/>
        <arg name="gui" default="$(arg gui)"/>
        <!--arg name="gzweb" default="$(arg gzweb)"/-->
        <arg name="verbose" default="$(arg verbose)"/>
        <!--arg name="start_gazebo" default="$(arg start_gazebo)"/-->
        <arg name="physics" value="ode"/>
    </include>
    </group>

    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model ur5" />

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="/home/walter/catkin_ws/src/ur5_robotiq_85_simulation/config/ur5_robotiq_85_control.yaml" command="load" />
     /home/walter/catkin_ws/src/ur5erobotiq_moveit_config/config/ros_controllers.yaml

    <!-- load the controllers -->
    <node name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="gripper_controller" />
    <node name="controller_spawner"      pkg="controller_manager" type="spawner" respawn="false" output="screen" args="arm_controller joint_state_controller" />
    


    <!--remap from="/head_mount_kinect/depth_registered/points" to="kinect_V2/depth_registered/points"/-->

    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    
    <include file="$(find ur5erobotiq_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="true" />
    </include>
    <include file="$(find ur5erobotiq_moveit_config)/launch/move_group.launch">
    </include>
    
    <group if="$(arg gui)">
        <include file="$(find ur5erobotiq_moveit_config)/launch/moveit_rviz.launch">
            <arg name="rviz_config" value="$(arg rviz_config)"/>
        </include>
    </group>


    <!--node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" /-->

    <!-- launch robot control node for moveit motion planning -->
    <node pkg="ur5_robotiq_85_simulation" type="robot_control_node" name="robot_control_node" output="screen" />

    <!-- load (not start!) custom joint position controller -->
    <node pkg="controller_manager" type="spawner" name="joint_position_launcher" args="--stopped joint_position_controller" />
</launch>
